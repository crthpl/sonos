#!/usr/bin/env python3
# by Antony Lesuisse 2020, public domain
import os,re,select,subprocess,sys,soco,time

init_vol=30
max_vol=100

def run(cmd,shell=False):
    print(cmd)
    if '|' in cmd:
        shell=True
    else:
        cmd=cmd.split(' ')
    o=subprocess.check_output(cmd,shell=shell).decode('utf8')
    return o

def soco_discover():
    s=soco.discover(timeout=10,include_invisible=True,allow_network_scan=True)
    print(s)
    if s is None:
        raise Exception
    i = 0
    for speker in s:
        print(f'--- {i} ---')
        i += 1
        print(speker.get_speaker_info())
        if speker.get_speaker_info()['zone_name'] == '3 Bad':
            return speker
    return list(s)[int(input('select speakers: '))]

def soco_play(s,vol):
    ip=run('ip addr show scope global | grep "inet "  |cut -d" " -f6| cut -d/ -f1 | head -1').strip()
    #if not s.get_current_track_info()['uri'].endswith('pc.flac'):
    s.clear_queue()
    s.add_uri_to_queue('http://%s:8888/pc.flac'%ip)
    s.play_from_queue(0)
    soco_volume(s)
    s.play()

def soco_volume(s):
    #o=run('amixer sget Master,0')
    #l=re.findall(r' \[([0-9]*)%\] ',o)
    l=run("pactl get-sink-volume Sonos | sed 's/Volume://' | tr ',' '\\n' | awk '{print $4}' | head -2 | sed 's/%//'").split('\n')
    v=int(l[0])
    s.volume=min(max_vol,v)

def pasink_load():
    o=run('pactl list sinks short')
    sink=run("pactl list sinks short | awk '{print $2}'| head -1").strip()
    if not 'Sonos' in o:
        run('pactl load-module module-combine-sink sink_name=Sonos sink_properties=device.description=Sonos slaves=%s channels=2' % sink)
    run('pactl set-sink-volume Sonos %i%%' % init_vol)
    run('pactl set-sink-volume %s 0%%' % sink)
    run('pactl set-default-sink Sonos')

def pasink_unload():
    sink=list(filter(lambda x: 'analog-stereo' in x, run("pactl list sinks short | awk '{print $2}'").split('\n')))[0]#.strip()
    run('pactl set-default-sink %s'%sink)
    run('pactl unload-module module-combine-sink')

def vlc():
    #c="/usr/bin/cvlc -vvv pulse://Sonos.monitor --network-caching=1 --file-caching=1 --live-caching=1 --clock-synchro=0 --clock-jitter=0 --avcodec-fast --avcodec-threads=1 -0 --disable-fixed-subframes --disable-constant-subframes --sout #transcode{vcodec=none,acodec=wav,ab=50,channels=2,samplerate=44100,scodec=none,mux_caching=1000}:standard{access=http,dst=0.0.0.0:8888/pc.wav}"
    #c="/usr/bin/ffmpeg -chunk_size 512 -f pulse -fragment_size 1 -i Sonos.monitor -filter:v [1:a]adelay=0|0[out] -listen 1 -fflags nobuffer -flags low_delay -avioflags direct -acodec flac -b:a 48000 -chunk_size 512 http://0.0.0.0:8888/pc.flac"
    c="ffmpeg -chunk_size 512 -f pulse -fragment_size 1 -i Sonos.monitor -listen 1 -fflags nobuffer -flags low_delay -avioflags direct -acodec flac -chunk_size 512 -lpc_type none http://0.0.0.0:8888/pc.flac"
    #c="sleep 50000"
    #c = "/home/theo/dev/audiotx/audiotx"
   # p=subprocess.Popen(c.split(" "),stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    p=subprocess.Popen(c.split(" "))
    time.sleep(0.05)
    return p

def silence():
    # very light Pink noise to avoid sonos to cut when there is silence
    #c="ffplay -loglevel 24 -nodisp -autoexit -f lavfi -i anullsrc=r=44100:cl=mono"
    c="ffplay -loglevel 24 -nodisp -autoexit -f lavfi -i anoisesrc=c=pink:r=441000:a=0.01"
    p=subprocess.Popen(c.split(" "),stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    return p

def main():
    pasink_load()
    p=vlc()
    ps=silence()
    s=soco_discover()
    if len(sys.argv) > 1:
        vol=int(sys.argv[1])
    s.volume = init_vol
    soco_play(s,init_vol)
    volume_change_p=subprocess.Popen("pactl subscribe | grep --line-buffered 'sink'", shell=True, stdout=subprocess.PIPE)
    fds=[volume_change_p.stdout.fileno()]
    prev=0
    try:
        while 1:
            ret=select.select(fds, [], [])
            for fd in ret[0]:
                buf=os.read(fd,1024).decode('utf8')
                #print(buf, end='')
                if 'sink' in buf:
                    soco_volume(s)
    except (Exception,KeyboardInterrupt) as e:
        print('Catched %r'% e)
        print('killing audiotx')
        #os.system('killall -INT audiotx')
        p.terminate()
        os.system('pkill ffplay')
        print('killing ffplay')
        ps.terminate()
        os.system('pkill ffmpeg')
        print('unload pasink')
        pasink_unload()
        print(e)
main()

